<?xml version="1.0"?>

<!--
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
-->

<project name="jck" default="build" basedir=".">
	<taskdef resource="net/sf/antcontrib/antlib.xml" />
	<description>Build STF based JCK Tests </description>

	<!-- set global properties for this build -->
	<property name="SYSTEMTEST_ROOT" value="${basedir}/../system" />
	<property name="DEST" value="${BUILD_ROOT}/jck" />
	<property name="SYSTEMTEST_BUILD_ROOT" value="${BUILD_ROOT}/system" />
	<property environment="env" />

	<condition property="isZOS" value="true">
		<equals arg1="${os.name}" arg2="z/OS"/>
	</condition>

	<condition property="git-prefix" value="git" else="https">
		<isset property="isZOS"/>
	</condition>

	<condition property="openjdk_systemtest_repo" value="${env.ADOPTOPENJDK_SYSTEMTEST_REPO}" else="${git-prefix}://github.com/adoptium/aqa-systemtest.git">
		<isset property="env.ADOPTOPENJDK_SYSTEMTEST_REPO"/>
	</condition>
	<condition property="openjdk_systemtest_branch" value="${env.ADOPTOPENJDK_SYSTEMTEST_BRANCH}" else="master">
		<isset property="env.ADOPTOPENJDK_SYSTEMTEST_BRANCH"/>
	</condition>

	<condition property="stf_repo" value="${env.STF_REPO}" else="${git-prefix}://github.com/adoptium/STF.git">
		<isset property="env.STF_REPO"/>
	</condition>
	<condition property="stf_branch" value="${env.STF_BRANCH}" else="master">
		<isset property="env.STF_BRANCH"/>
	</condition>

	<condition property="jck_branch" value="${env.JCK_GIT_BRANCH}" else="master">
		<isset property="env.JCK_GIT_BRANCH"/>
	</condition>

	<target name="stage_jck_material">
		<!-- Starting downloading or updating JCK materials based on JCK GIT REPO and JCK VERSION-->
		<if>
			<available file="${JCK_ROOT_USED}" type="dir" />
			<then>
				<!--Obtain local and remote SHA to figure out if local materials are up-to-date-->
				<exec executable="git" dir="${JCK_ROOT_USED}" outputproperty="localSHA">
					<arg line="rev-parse"/>
					<arg line="HEAD"/>
				</exec>
				<exec executable="git" dir="${JCK_ROOT_USED}" outputproperty="remoteSHA">
					<arg line="ls-remote"/>
					<arg line="${JCK_GIT_REPO_USED}"/>
					<arg line="${jck_branch}"/>
				</exec>
				<loadresource property="localSHATrimmed">
					<propertyresource name="localSHA"/>
					<filterchain>
						<tokenfilter>
							<trim/>
						</tokenfilter>
						<striplinebreaks/>
					</filterchain>
				</loadresource>

				<echo message="LocalSHA = --${localSHATrimmed}--"/>
				<echo message="RemoteSHA= --${remoteSHA}--"/>

				<condition property="local-material-uptodate">
					<contains string="${remoteSHA}" substring="${localSHATrimmed}" />
				</condition>
			</then>
		</if>
		<if>
			<not>
				<available file="${JCK_ROOT_USED}" type="dir" />
			</not>
			<!-- jck materials don't exist, download them -->
			<then>
				<echo message="${JCK_ROOT_USED} does not exist,
					clone from ${JCK_GIT_REPO_USED}, ${jck_branch} branch, to ${JCK_ROOT_USED}" />
				<mkdir dir="${JCK_ROOT_USED}/.." />
				<exec executable="git" dir="${JCK_ROOT_USED}/.." failonerror="true">
					<arg value="clone" />
					<arg value="--single-branch" />
					<arg value="-b"/>
					<arg value="${jck_branch}"/>
					<arg value="${JCK_GIT_REPO_USED}" />
				</exec>
			</then>
			<!-- jck materials exist, update jck materials if needed-->
			<else>
				<if>
					<isset property="env.SKIP_JCK_GIT_UPDATE" />
					<!-- don't want to update local JCK materials -->
					<then>
						<echo message="env.SKIP_JCK_GIT_UPDATE is set. Skip Running git update at ${JCK_ROOT_USED}. Continue." />
					</then>
					<else>
						<if>
							<isset property="local-material-uptodate" />
							<then>
								<echo message="Local JCK materials up-to-date. Skipping update"/>
							</then>
							<else>
								<if>
									<available file="${JCK_ROOT_USED}/natives" type="dir" />
									<then>
										<echo message="Deleting ${JCK_ROOT_USED}/natives..." />
										<delete includeEmptyDirs="true">
  											<fileset dir="${JCK_ROOT_USED}/natives"/>
										</delete>
									</then>
								</if>
								<echo message="Updating ${JCK_ROOT_USED} with latest..." />
								<exec executable="git" dir="${JCK_ROOT_USED}" failonerror="true">
									<arg value="pull" />
									<arg value="${JCK_GIT_REPO_USED}" />
									<arg value="${jck_branch}" />
								</exec>
							</else>
						</if>
					</else>
				</if>
			</else>
		</if>
		<if>
			<isset property="isZOS" />
			<then>
				<if>
					<isset property="local-material-uptodate"/>
					<then>
						<echo message="Local JCK materials up-to-date. Skipping hard reset"/>
					</then>
					<else>
						<echo message="Performing hard reset of ${JCK_ROOT_USED} using .gitattributes.zos for file conversions..."/>
						<delete includeemptydirs="true" failonerror="false">
							<fileset dir="${JCK_ROOT_USED}/.git/info" includes="**/*"/>
						</delete>
						<mkdir dir="${JCK_ROOT_USED}/.git/info" />
						<move file="${JCK_ROOT_USED}/.gitattributes.zos" tofile="${JCK_ROOT_USED}/.git/info/attributes" />
						<exec executable="git" dir="${JCK_ROOT_USED}" failonerror="false">
							<arg value="rm" />
							<arg value="--cached" />
							<arg value="-r" />
							<arg value="-q" />
							<arg value="." />
						</exec>
						<exec executable="git" dir="${JCK_ROOT_USED}" failonerror="false">
							<arg value="reset" />
							<arg value="--hard" />
						</exec>
					</else>
				</if>
			</then>
		</if>
	</target>

	<target name="init">
		<mkdir dir="${DEST}" />
		<if>
			<not>
				<available file="${SYSTEMTEST_BUILD_ROOT}" type="dir" />
			</not>
			<then>
				<mkdir dir="${SYSTEMTEST_BUILD_ROOT}" />
			</then>
		</if>
	</target>

	<target name="clone_stf">
		<echo message="Cloning from: ${stf_repo} -b ${stf_branch}"/>
		<exec executable="git" failonerror="false" dir="${SYSTEMTEST_ROOT}">
			<arg value="clone" />
			<arg value="--depth" />
			<arg value="1" />
			<arg value="--single-branch" />
			<arg value="-b"/>
			<arg value="${stf_branch}"/>
			<arg value="${stf_repo}"/>
			<arg value="STF"/>
		</exec>
		<if>
			<isset property="isZOS" />
			<then>
				<delete includeemptydirs="true" failonerror="false">
					<fileset dir="${SYSTEMTEST_ROOT}/STF/.git/info" includes="**/*"/>
				</delete>
				<mkdir dir="${SYSTEMTEST_ROOT}/STF/.git/info" />
				<move file="${SYSTEMTEST_ROOT}/STF/.gitattributes.zos" tofile="${SYSTEMTEST_ROOT}/STF/.git/info/attributes" />
				<exec executable="git" dir="${SYSTEMTEST_ROOT}/STF" failonerror="false">
					<arg value="rm" />
					<arg value="--cached" />
					<arg value="-r" />
					<arg value="-q" />
					<arg value="." />
				</exec>
				<exec executable="git" dir="${SYSTEMTEST_ROOT}/STF" failonerror="false">
					<arg value="reset" />
					<arg value="--hard" />
				</exec>
			</then>
		</if>
		<echo message="SHA of the checked out STF materials:"/>
		<exec executable="git" failonerror="false">
			<arg value="ls-remote" />
			<arg value="${stf_repo}"/>
			<arg value="${stf_branch}"/>
		</exec>
	</target>

	<target name="clone_systemtest">
		<echo message="Cloning from: ${openjdk_systemtest_repo} -b ${openjdk_systemtest_branch}"/>
		<exec executable="git" failonerror="false" dir="${SYSTEMTEST_ROOT}">
			<arg value="clone" />
			<arg value="--depth" />
			<arg value="1" />
			<arg value="--single-branch" />
			<arg value="-b"/>
			<arg value="${openjdk_systemtest_branch}"/>
			<arg value="${openjdk_systemtest_repo}"/>
		</exec>
		<if>
			<isset property="isZOS" />
			<then>
				<delete includeemptydirs="true" failonerror="false">
					<fileset dir="${SYSTEMTEST_ROOT}/aqa-systemtest/.git/info" includes="**/*"/>
				</delete>
				<mkdir dir="${SYSTEMTEST_ROOT}/aqa-systemtest/.git/info" />
				<move file="${SYSTEMTEST_ROOT}/aqa-systemtest/.gitattributes.zos" tofile="${SYSTEMTEST_ROOT}/aqa-systemtest/.git/info/attributes" />
				<exec executable="git" dir="${SYSTEMTEST_ROOT}/aqa-systemtest" failonerror="false">
					<arg value="rm" />
					<arg value="--cached" />
					<arg value="-r" />
					<arg value="-q" />
					<arg value="." />
				</exec>
				<exec executable="git" dir="${SYSTEMTEST_ROOT}/aqa-systemtest" failonerror="false">
					<arg value="reset" />
					<arg value="--hard" />
				</exec>
			</then>
		</if>
		<echo message="SHA of the checked out aqa-systemtest materials:"/>
		<exec executable="git" failonerror="false">
			<arg value="ls-remote" />
			<arg value="${openjdk_systemtest_repo}"/>
			<arg value="${openjdk_systemtest_branch}"/>
		</exec>
	</target>

	<target name="check_systemtest" depends="init">
		<if>
			<not>
				<available file="${SYSTEMTEST_ROOT}/STF" type="dir" />
			</not>
			<then>
				<echo message="${SYSTEMTEST_ROOT}/STF does not exist, clone from GitHub" />
				<antcall target="clone_stf" inheritall="true" />
			</then>
			<else>
				<echo message="${SYSTEMTEST_ROOT}/STF exists, skip cloning" />
			</else>
		</if>
		<if>
			<not>
				<available file="${SYSTEMTEST_ROOT}/aqa-systemtest" type="dir" />
			</not>
			<then>
				<echo message="${SYSTEMTEST_ROOT}/aqa-systemtest does not exist, clone from GitHub" />
				<antcall target="clone_systemtest" inheritall="true" />
			</then>
			<else>
				<echo message="${SYSTEMTEST_ROOT}/aqa-systemtest exists, skip cloning" />
			</else>
		</if>
	</target>

	<target name="prepare_systemtest_for_jck" depends="check_systemtest">
		<ant antfile="${SYSTEMTEST_ROOT}/aqa-systemtest/openjdk.build/build.xml" dir="${SYSTEMTEST_ROOT}/aqa-systemtest/openjdk.build" target="configure" inheritAll="false" />
		<ant antfile="${SYSTEMTEST_ROOT}/aqa-systemtest/openjdk.build/build.xml" dir="${SYSTEMTEST_ROOT}/aqa-systemtest/openjdk.build" target="build" inheritAll="false">
			<property name="jck_runtimes_src_dir" value="${JCK_ROOT_USED}/JCK-runtime-${jck_short_version}"/>
			<property name="out_dir" value="${JCK_ROOT_USED}/natives" />
		</ant>
	</target>

	<target name="dist" depends="prepare_systemtest_for_jck" description="generate the distribution">
		<if>
			<not>
				<available file="${SYSTEMTEST_BUILD_ROOT}/aqa-systemtest" type="dir" />
			</not>
			<then>
				<copy todir="${SYSTEMTEST_BUILD_ROOT}/STF">
					<fileset dir="${SYSTEMTEST_ROOT}/STF" includes="**" />
				</copy>
				<copy todir="${SYSTEMTEST_BUILD_ROOT}/aqa-systemtest">
					<fileset dir="${SYSTEMTEST_ROOT}/aqa-systemtest" includes="**" />
				</copy>
				<copy todir="${SYSTEMTEST_BUILD_ROOT}/systemtest_prereqs/">
					<fileset dir="${basedir}/../systemtest_prereqs/" includes="**" />
				</copy>
			</then>
		</if>
		<copy todir="${DEST}">
			<fileset dir="${basedir}">
				<exclude name="jck_root/" />
				<exclude name="README.md" />
			</fileset>
		</copy>
	</target>

	<target name="build">
		<fail message="env.JCK_GIT_REPO: ${env.JCK_GIT_REPO} was not correctly set for running JCK tests. If you do not want to compile JCK tests,
						please use BUILD_LIST to include test folders you want to test.">
			<condition>
				<not>
					<isset property="env.JCK_GIT_REPO"/>
				</not>
			</condition>
		</fail>
		<propertyregex property="JCK_GIT_REPO_USED" input="${env.JCK_GIT_REPO}" regexp="JCKnext-unzipped.git" replace="JCK${JDK_VERSION}-unzipped.git" casesensitive="false" defaultValue="${env.JCK_GIT_REPO}"/>
		<echo>=== JCK_GIT_REPO_USED is set to ${JCK_GIT_REPO_USED} ===</echo>

		<condition property="JCK_ROOT_RELATIVE_PATH" value="${env.JCK_ROOT}" else="${basedir}/../../../../jck_root/JCK${JDK_VERSION}-unzipped">
			<isset property="env.JCK_ROOT" />
		</condition>

		<property name="JCK_ROOT_USED" location="${JCK_ROOT_RELATIVE_PATH}"/>

		<echo>=== JCK_ROOT_USED is set to ${JCK_ROOT_USED} ===</echo>

		<if>
			<isset property="env.JCK_VERSION" />
			<then>
				<property name="JCK_VERSION_USED" value="${env.JCK_VERSION}" />
			</then>
			<else>
				<if>
					<equals arg1="${JDK_VERSION}" arg2="8" />
					<then>
						<property name="JCK_VERSION_USED" value="jck8c" />
					</then>
					<else>
						<property name="JCK_VERSION_USED" value="jck${JDK_VERSION}" />
					</else>
				</if>
			</else>
		</if>
		<echo>=== JCK_VERSION_USED is set to ${JCK_VERSION_USED} ===</echo>

		<propertyregex property="jck_short_version" input="${JCK_VERSION_USED}" regexp="jck([^\.]*)" select="\1" casesensitive="false" />

		<echo>start staging jck materials</echo>
		<antcall target="stage_jck_material" inheritall="true" />
		<echo>start building stf, stf jck wrapper and jck itself</echo>
		<antcall target="dist" inheritall="true" />
	</target>

	<target name="clean">
		<ant antfile="${SYSTEMTEST_ROOT}/aqa-systemtest/openjdk.build/build.xml" dir="${SYSTEMTEST_ROOT}/aqa-systemtest/openjdk.build" inheritAll="false" target="clean"></ant>
		<ant antfile="${SYSTEMTEST_ROOT}/STF/stf.build/build.xml" dir="${SYSTEMTEST_ROOT}/STF/stf.build" inheritAll="false" target="clean"></ant>
	</target>
</project>
