#!groovy

def PLATFORM_MAP = [ 
    'aarch32_linux' : [
        'SPEC' : 'linux_arm',
        'LABEL' : 'ci.role.test&&sw.os.linux&&hw.arch.aarch32',
    ],
    'aarch64_linux' : [
        'SPEC' : 'linux_aarch64_cmprssptrs',
        'LABEL' : 'ci.role.test&&sw.os.linux&&hw.arch.aarch64',
    ],
    'aarch64_linux_xl' : [
        'SPEC' : 'linux_aarch64',
        'LABEL' : 'ci.role.test&&sw.os.linux&&hw.arch.aarch64',
    ],
    'ppc32_aix' : [
        'SPEC' : 'aix_ppc',
        'LABEL' : 'ci.role.test&&hw.arch.ppc64&&sw.os.aix',
    ],
    'ppc32_linux' : [
        'SPEC' : 'linux_ppc',
        'LABEL' : 'ci.role.test&&hw.arch.ppc64&&sw.os.linux',
    ],
    'ppc64_aix' : [
        'SPEC' : 'aix_ppc-64_cmprssptrs',
        'LABEL' : 'ci.role.test&&hw.arch.ppc64&&sw.os.aix',
    ],
    'ppc64_aix_xl' : [
        'SPEC' : 'aix_ppc-64',
        'LABEL' : 'ci.role.test&&hw.arch.ppc64&&sw.os.aix',
    ],
    'ppc64_linux' : [
        'SPEC' : 'linux_ppc-64_cmprssptrs',
        'LABEL' : 'ci.role.test&&hw.arch.ppc64&&sw.os.linux',
    ],
    'ppc64_linux_xl' : [
        'SPEC' : 'linux_ppc-64',
        'LABEL' : 'ci.role.test&&hw.arch.ppc64&&sw.os.linux',
    ],
    'ppc64le_linux' : [
        'SPEC' : 'linux_ppc-64_cmprssptrs_le',
        'LABEL' : 'ci.role.test&&hw.arch.ppc64le&&sw.os.linux',
    ],
    'ppc64le_linux_xl' : [
        'SPEC' : 'linux_ppc-64_le',
        'LABEL' : 'ci.role.test&&hw.arch.ppc64le&&sw.os.linux',
    ],
    'riscv64_linux' : [
        'SPEC' : 'linux_riscv64_cmprssptrs',
        'LABEL' : 'ci.role.test&&sw.os.linux&&hw.arch.riscv&&hw.bits.64',
    ],
    'riscv64_linux_xl' : [
        'SPEC' : 'linux_riscv64',
        'LABEL' : 'ci.role.test&&sw.os.linux&&hw.arch.riscv&&hw.bits.64',
    ],
    's390_linux' : [
        'SPEC' : 'linux_390',
        'LABEL' : 'ci.role.test&&hw.arch.s390x&&sw.os.linux&&hw.bits.32',
    ],
    's390_zos' : [
        'SPEC' : 'zos_390',
        'LABEL' : 'ci.role.test&&hw.arch.s390x&&sw.os.zos',
    ],
    's390x_linux' : [
        'SPEC' : 'linux_390-64_cmprssptrs',
        'LABEL' : 'ci.role.test&&hw.arch.s390x&&sw.os.linux',
    ],
    's390x_linux_xl' : [
        'SPEC' : 'linux_390-64',
        'LABEL' : 'ci.role.test&&hw.arch.s390x&&sw.os.linux',
    ],
    's390x_zos' : [
        'SPEC' : 'zos_390-64_cmprssptrs',
        'LABEL' : 'ci.role.test&&hw.arch.s390x&&sw.os.zos',
    ],
    's390x_zos_xl' : [
        'SPEC' : 'zos_390-64',
        'LABEL' : 'ci.role.test&&hw.arch.s390x&&sw.os.zos',
    ],
    'sparcv9_solaris' : [
        'SPEC' : 'sunos_sparcv9-64_cmprssptrs',
        'LABEL' : 'ci.role.test&&hw.arch.sparcv9&&sw.os.sunos',
    ],
    'x86-32_linux' : [
        'SPEC' : 'linux_x86',
        'LABEL' : 'ci.role.test&&hw.arch.x86&&sw.os.linux',
    ],
    'x86-32_windows' : [
        'SPEC' : 'win_x86',
        'LABEL' : 'ci.role.test&&hw.arch.x86&&sw.os.windows',
    ],
    'x86-64_linux' : [
        'SPEC' : 'linux_x86-64_cmprssptrs',
        'LABEL' : 'ci.role.test&&hw.arch.x86&&sw.os.linux',
    ],
    'x86-64_linux_xl' : [
        'SPEC' : 'linux_x86-64',
        'LABEL' : 'ci.role.test&&hw.arch.x86&&sw.os.linux',
    ],
    'x86-64_mac' : [
        'SPEC' : 'osx_x86-64_cmprssptrs',
        'LABEL' : 'ci.role.test&&hw.arch.x86&&sw.os.osx',
    ],
    'x86-64_mac_xl' : [
        'SPEC' : 'osx_x86-64',
        'LABEL' : 'ci.role.test&&hw.arch.x86&&sw.os.osx',
    ],
    'x86-64_windows' : [
        'SPEC' : 'win_x86-64_cmprssptrs',
        'LABEL' : 'ci.role.test&&hw.arch.x86&&sw.os.windows',
    ],
    'x86-64_windows_xl' : [
        'SPEC' : 'win_x86-64',
        'LABEL' : 'ci.role.test&&hw.arch.x86&&sw.os.windows',
    ]
]


if (PLATFORM_MAP.containsKey(params.PLATFORM)) {
    SPEC = PLATFORM_MAP[params.PLATFORM]["SPEC"]
    LABEL = params.LABEL ? params.LABEL : PLATFORM_MAP[params.PLATFORM]["LABEL"]

    if (params.DOCKER_REQUIRED) {
        LABEL += "&&sw.tool.docker"
    }

    if (params.LABEL_ADDITION) {
        LABEL += "&&${params.LABEL_ADDITION}"
    }

    println "SPEC: ${SPEC}"
    println "LABEL: ${LABEL}"

    stage('Queue') {
        node(LABEL) {
            if (params.PLATFORM.contains('zos')) {
                /* Ensure correct CC env */
                env._CC_CCMODE = '1'
                env._CXX_CCMODE = '1'
                env._C89_CCMODE = '1'

                def gitConfig = scm.getUserRemoteConfigs()[0]
                def SCM_GIT_REPO = gitConfig.getUrl()
                def SCM_GIT_BRANCH = scm.branches[0].name
                cleanWs()

                // SCM_GIT_REPO value only gets expanded in sh
                def SCM_GIT_REPO_VAL = sh(script: "echo ${SCM_GIT_REPO}", returnStdout: true).trim()
                SCM_GIT_REPO_VAL = SCM_GIT_REPO_VAL.replace("https://github.com/","git@github.com:")

                sh "git clone -b ${SCM_GIT_BRANCH} ${SCM_GIT_REPO_VAL} openjdk-tests"
            } else {
                def gitConfig = scm.getUserRemoteConfigs().get(0)
		
		// Adopt windows machines require env here https://github.com/AdoptOpenJDK/openjdk-tests/issues/1803
		ref_cache = "${env.HOME}/openjdk_cache"
		   
                checkout scm: [$class: 'GitSCM',
                    branches: [[name: "${scm.branches[0].name}"]],
                    extensions: [
                        [$class: 'CloneOption', reference: ref_cache],
                        [$class: 'RelativeTargetDirectory', relativeTargetDir: 'openjdk-tests']],
                    userRemoteConfigs: [[url: "${gitConfig.getUrl()}"]]
                ]
            }
            jenkinsfile = load "${WORKSPACE}/openjdk-tests/buildenv/jenkins/JenkinsfileBase"
            jenkinsfile.testBuild()
        }
    }
    jenkinsfile.run_parallel_tests()
} else {
	assert false : "Cannot find key PLATFORM: ${params.PLATFORM} in PLATFORM_MAP: ${PLATFORM_MAP}."
}
