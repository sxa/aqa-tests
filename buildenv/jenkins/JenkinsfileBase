#!groovy
def getBuildList() {
	def TESTPROJECTS = [system:'systemtest', perf:'performance', jck:'jck', external:'thirdparty_containers', functional: 'functional', openjdk:'openjdk_regression', jdk:'openjdk_regression', runtest:'', sanity:'', extended:'']
	String fullTarget="${TARGET}"
	String[] levelTargets = fullTarget.split('\\.')
	String groupTarget = levelTargets[-1]
	String[] partsTarget = groupTarget.split('_|-')
	String simpleTarget = partsTarget[0]
	def TESTPROJECT = TESTPROJECTS[simpleTarget]
	return TESTPROJECT
}

def archiveTestBinaries() {
	dir("$WORKSPACE") {
		sh "tar -zcf test-binaries.tar.gz ./openjdk-tests ./jvmtest ./openjdkbinary"
	}
	archiveArtifacts artifacts: '**/test-binaries.tar.gz', fingerprint: true, allowEmptyArchive: false
}

def stageTestBinaries() {
	copyArtifacts filter: 'test-binaries.tar.gz', fingerprintArtifacts: true, projectName: "${env.JOB_NAME}", selector: specific("${env.BUILD_ID}")
	sh "tar -xzf test-binaries.tar.gz"
	echo pwd()
	sh "ls"
}

def makeTest(testParam) {
	String tearDownCmd = "if [ `uname` = AIX ]; then MAKE=gmake; else MAKE=make; fi; \$MAKE -f ./openjdk-tests/TestConfig/testEnv.mk testEnvTeardown"
	try {
		sh "$tearDownCmd"
		sh "./openjdk-tests/maketest.sh $testParam" 
	} finally {
		sh "$tearDownCmd"
	}
}

def setupEnv() {
	// if ADOPTOPENJDK_REPO and ADOPTOPENJDK_BRANCH are provided, clean the workpsace and re-download it
	if (params.ADOPTOPENJDK_REPO && params.ADOPTOPENJDK_BRANCH) {
		cleanWs()
		checkout([
			$class: 'GitSCM', branches: [[name: "*/${params.ADOPTOPENJDK_BRANCH}"]],
			extensions: [[$class:'CloneOption', shallow:true, depth:1],[$class: 'CleanBeforeCheckout'],[$class: 'RelativeTargetDirectory', relativeTargetDir: 'openjdk-tests']],
			userRemoteConfigs: [[url: "${params.ADOPTOPENJDK_REPO}"]]
		])
	}

	// env.JAVA_VERSION = "${getJavaVersionFromJvmVersion()}"
	env.JAVA_VERSION = "${JAVA_VERSION}"
	/* Optional parameter JAVA_VERSION to use for Panama/Valhalla/Amber cases, otherwise its calculated from JVM_VERSION */ 
	if( params.JAVA_VERSION ) {
		env.JAVA_VERSION = params.JAVA_VERSION
	}

	env.JAVA_BIN = "$WORKSPACE/openjdkbinary/j2sdk-image/${(JAVA_VERSION == 'SE80') ? 'jre/' : ''}bin"
	env.JRE_IMAGE = "$WORKSPACE/openjdkbinary/j2jre-image"
	env.JAVA_HOME = "${JAVA_BIN}/.."
	env.JVM_VERSION = params.JVM_VERSION ? params.JVM_VERSION : ""
	env.JVM_OPTIONS = params.JVM_OPTIONS ? params.JVM_OPTIONS : ""
	env.EXTRA_OPTIONS = params.EXTRA_OPTIONS ? params.EXTRA_OPTIONS : ""
	env.SPEC = "${SPEC}"
	env.TEST_FLAG = params.TEST_FLAG ? params.TEST_FLAG : ''

	if (params.JDK_IMPL) {
		env.JDK_IMPL = params.JDK_IMPL
	} else if (params.JVM_VERSION) {
		env.JDK_IMPL = getJDKImpl(params.JVM_VERSION)
	}
	if( params.BUILD_LIST ) {
		env.BUILD_LIST = params.BUILD_LIST
	} else {
		env.BUILD_LIST = "${getBuildList()}"
	}
	
	if( params.PERF_ROOT ) {
		env.PERF_ROOT = params.PERF_ROOT
	} else {
		env.PERF_ROOT = "$WORKSPACE/../benchmarks"
	}

	if (env.BUILD_LIST == "jck") {
		if ( JAVA_VERSION == "SE80" ) {
			env.JCK_VERSION = "jck8b"
		} else {
			env.JCK_VERSION = "jck${JAVA_VERSION[2..-2]}"
		}
		env.JCK_ROOT = "$WORKSPACE/../jck_root"
		echo "env.JCK_ROOT is: ${env.JCK_ROOT}, env.JCK_VERSION is: ${env.JCK_VERSION}"
		if( params.JCK_GIT_REPO ) {
			env.JCK_GIT_REPO = params.JCK_GIT_REPO
			echo "env.JCK_GIT_REPO is ${env.JCK_GIT_REPO}"
		} else {
			echo "params.JCK_GIT_REPO was not defined"
		}
	}
	
	if (env.BUILD_LIST == 'openjdk_regression' ||  env.BUILD_LIST == 'thirdparty_containers') {
		env.DIAGNOSTICLEVEL ='noDetails'
	}
	
	// Optional parameter RELEASE_TAG and it is only used in openjdk regression test
	if( params.RELEASE_TAG ) {
		env.RELEASE_TAG = params.RELEASE_TAG
	}
	sh 'printenv'
}

def setupParallelEnv() {
	stage('setupParallelEnv') {
		timestamps{
			cleanWs()
			setupEnv()
		}
	}
}

def setup() {
	stage('Setup') {
		timestamps{
			setupEnv()

			if (fileExists('openjdkbinary')) {
				dir('openjdkbinary') {
					deleteDir()
				}
			}
			if (fileExists('jvmtest')) {
				dir('jvmtest') {
					deleteDir()
				}
			}
			
			SDK_RESOURCE = params.SDK_RESOURCE ? params.SDK_RESOURCE : "upstream"

			if (params.CUSTOMIZED_SDK_URL) {
				SDK_RESOURCE = "customized"
				CUSTOMIZED_SDK_URL_OPTION = "-c '${params.CUSTOMIZED_SDK_URL}'"
			} else {
				CUSTOMIZED_SDK_URL_OPTION = ""
			}
			
			if (SDK_RESOURCE == 'upstream' && !params.CUSTOMIZED_SDK_URL) {
				dir('openjdkbinary') {
					step([$class: 'CopyArtifact',
						fingerprintArtifacts: true,
						flatten: true,
						filter: "**/*.tar.gz,**/*.tgz,**/*.zip,**/*.jar",
						projectName: "${params.UPSTREAM_JOB_NAME}",
						selector: [$class: 'SpecificBuildSelector', buildNumber: "${params.UPSTREAM_JOB_NUMBER}"]])
				}
			}
			OPENJ9_REPO_OPTION = (params.OPENJ9_REPO) ? "--openj9_repo ${params.OPENJ9_REPO}" : "--openj9_repo https://github.com/eclipse/openj9.git"
			OPENJ9_BRANCH_OPTION = (params.OPENJ9_BRANCH) ? "--openj9_branch ${params.OPENJ9_BRANCH}" : ""
			OPENJ9_SHA_OPTION = (params.OPENJ9_SHA) ? "--openj9_sha ${params.OPENJ9_SHA}" : ""

			// vendor test
			// expect VENDOR_TEST_* to be comma separated string parameters
			VENDOR_TEST_REPOS = (params.VENDOR_TEST_REPOS) ? "--vendor_repos \"${params.VENDOR_TEST_REPOS}\"" : ""
			VENDOR_TEST_BRANCHES = (params.VENDOR_TEST_BRANCHES) ? "--vendor_branches \"${params.VENDOR_TEST_BRANCHES}\"" : ""
			VENDOR_TEST_DIRS = (params.VENDOR_TEST_DIRS) ? "--vendor_dirs \"${params.VENDOR_TEST_DIRS}\"" : ""
			VENDOR_TEST_SHAS = (params.VENDOR_TEST_SHAS) ? "--vendor_shas \"${params.VENDOR_TEST_SHAS}\"" : ""
			GET_SH_CMD = "./openjdk-tests/get.sh -s `pwd` -t `pwd`/openjdk-tests -p $PLATFORM -r ${SDK_RESOURCE} -j ${JAVA_VERSION} -i ${JDK_IMPL} ${CUSTOMIZED_SDK_URL_OPTION} ${OPENJ9_REPO_OPTION} ${OPENJ9_BRANCH_OPTION} ${OPENJ9_SHA_OPTION} ${VENDOR_TEST_REPOS} ${VENDOR_TEST_BRANCHES} ${VENDOR_TEST_DIRS} ${VENDOR_TEST_SHAS}"

			dir( WORKSPACE) {
				// use sshagent with Jenkins credentials ID for all platforms except zOS
				// on zOS use the user's ssh key
				if (!env.SPEC.startsWith('zos')) {
					get_sources_with_authentication()
				} else {
					get_sources()
				}
			}
		}
	}
}

def get_sources_with_authentication() {
	sshagent(credentials:["${params.USER_CREDENTIALS_ID}"], ignoreMissing: true) {
		get_sources()
	}
}

def get_sources() {
	if (params.CUSTOMIZED_SDK_URL_CREDENTIAL_ID) {
		// USERNAME and PASSWORD reference with a withCredentials block will not be visible within job output
		withCredentials([usernamePassword(credentialsId: "${params.CUSTOMIZED_SDK_URL_CREDENTIAL_ID}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
			sh "$GET_SH_CMD"
		}
	} else {
		sh "$GET_SH_CMD"
	}
}

def buildTest() {
	stage('Build') {
		timestamps{
			echo 'Building tests...'
					
			if ( params.PERF_CREDENTIALS_ID ) {
				withCredentials([usernamePassword(credentialsId: "$params.PERF_CREDENTIALS_ID",
					passwordVariable: "PASSWORD_VAR", usernameVariable: "USERNAME_VAR")]) {
						env.PERF_USERNAME = USERNAME_VAR
						env.PERF_PASSWORD = PASSWORD_VAR
				}
			}

			try {
				//get pre-staged jars from test.getDependency build before test compilation
				copyArtifacts fingerprintArtifacts: true, projectName: "test.getDependency", selector: lastSuccessful(), target: 'openjdk-tests/TestConfig/lib'
			} catch (Exception e) {
				echo 'Cannot run copyArtifacts from test.getDependency. Skipping copyArtifacts...'
			}
			
			try { 
				if (env.BUILD_LIST == 'systemtest') { 	
					//get pre-staged test jars from systemtest.getDependency build before system test compilation
					copyArtifacts fingerprintArtifacts: true, projectName: "systemtest.getDependency", selector: lastSuccessful(), target: 'openjdk-tests'
				}
			} catch (Exception e) {
				echo 'Cannot run copyArtifacts from systemtest.getDependency. Skipping copyArtifacts...'
			}

			echo 'Running tests...'
			// use sshagent with Jenkins credentials ID for all platforms except zOS
			if (!env.SPEC.startsWith('zos')) {
				sshagent (credentials: ["$params.SSH_AGENT_CREDENTIAL"], ignoreMissing: true) {
					makeTest("./openjdk-tests");
				}
			} else {
				makeTest("./openjdk-tests");
			}	
			
		}
	}
}

def runTest(subDir) {
	stage('Test') {
		timestamps{
			echo 'Running tests...'
			int iterations = 1;
			if (params.ITERATIONS) {
				iterations = "${params.ITERATIONS}".toInteger()
			}
			def CUSTOM_OPTION = ''
			if (TARGET.contains('custom')) {
				CUSTOM_OPTION = "${TARGET.toUpperCase()}_TARGET='${CUSTOM_TARGET}'"
			}
			for (i = 0; i < iterations; i++) {
				if (env.BUILD_LIST == "jck"){
					wrap([$class: 'Xvfb', autoDisplayName: true]) {
						def DISPLAY = sh (
							script: 'ps -f  | grep \'[X]vfb\' | awk \'{print \$9}\'',
							returnStdout: true
						).trim()
						env.DISPLAY = "${DISPLAY}"
						echo "env.DISPLAY is ${env.DISPLAY}"
						makeTest("./openjdk-tests/${subDir} _${params.TARGET} ${CUSTOM_OPTION}")
					}
				} else {
					makeTest("./openjdk-tests _${params.TARGET} ${CUSTOM_OPTION}")
				}
			}
		}
	}
}

def post(test_target) {
	stage('Post') {
		timestamps{
			if (SPEC.startsWith('zos')) {
				echo 'Converting tap file from ebcdic to ascii...'
				sh 'cd ./openjdk-tests/TestConfig'
				def tapFiles = findFiles(glob: "**/*.tap")
				for (String tapFile : tapFiles) {
					sh "iconv -f ibm-1047 -t iso8859-1 ${tapFile} > ${tapFile}.ascii; rm ${tapFile}; mv ${tapFile}.ascii ${tapFile}"
				}
			}
			step([$class: "TapPublisher", testResults: "**/*.tap", outputTapToConsole: false])
			junit allowEmptyResults: true, keepLongStdio: true, testResults: '**/work/**/*.jtr.xml, **/junitreports/**/*.xml, **/external_test_reports/**/*.xml'
			if (currentBuild.result == 'UNSTABLE') {
				sh "tar -zcf ${test_target}_test_output.tar.gz ./openjdk-tests/TestConfig/test_output_*"
				sh "find ./jvmtest/${env.BUILD_LIST}/work -name '*.jtr' | tar -zcf jtr_test_output.tar.gz -T -"

				if (!params.ARTIFACTORY_SERVER) {
					echo "ARTIFACTORY_SERVER is not set. Saving artifacts on jenkins."
					archiveArtifacts artifacts: "${test_target}_test_output.tar.gz", fingerprint: true, allowEmptyArchive: true
					archiveArtifacts artifacts: "jtr_test_output.tar.gz", fingerprint: true, allowEmptyArchive: true
				}
			}
			//for performance test, achive regardless the build result
			def benchmark_test_output_dir = 'jvmtest/performance/odm/ilog_wodm881/leftoverResults';
			if (fileExists(benchmark_test_output_dir)) {
				sh "tar -zcf ${testTarName} benchmark_test_output.tar.gz"
				if (!params.ARTIFACTORY_SERVER) {
					echo "ARTIFACTORY_SERVER is not set. Saving artifacts on jenkins."
					archiveArtifacts artifacts: 'benchmark_test_output.tar.gz', fingerprint: true, allowEmptyArchive: true
				}
			}

			uploadToArtifactory()
		}
	}
}

def testBuild() {
	def time_limit = 10
	if(params.TIME_LIMIT) {
		time_limit = params.TIME_LIMIT.toInteger()
	}
	timeout(time: time_limit, unit: 'HOURS') {
		try {
			addJobDescription()

			// prepare environment and compile test projects
			setup()
			buildTest()
			if( params.IS_PARALLEL ){
				// archive compiled test binaries for parallel jobs
				archiveTestBinaries()
				def testSubDirs = []
				def testSubDirSize = 0
				dir("$WORKSPACE/openjdk-tests/${env.BUILD_LIST}") {
					testSubDirs = sh(returnStdout: true, script: "ls -d */").trim().split()
					testSubDirSize = testSubDirs.size()
				}
				echo "testSubDirSize is ${testSubDirSize}, testSubDirs is ${testSubDirs}, running test in parallel mode"
				def parallel_tests = [:]
				for (int i = 0; i < testSubDirSize; i++) {
					def testSubDir = testSubDirs[i].trim().replace("/","");
					parallel_tests[testSubDir] = {
						node ("$LABEL") {
							addJobDescription()
							setupParallelEnv()
							stageTestBinaries()
							if( env.BUILD_LIST == "jck") {
								buildTest()
							}
							runTest("${env.BUILD_LIST}/${testSubDir}")
							post("${env.BUILD_LIST}-${testSubDir}")
						}
					}
				}
				parallel parallel_tests
			} else {
				echo "running test in default mode"
				runTest("${env.BUILD_LIST}")
				post("${env.BUILD_LIST}")
			}
		} finally {
                        echo "SXA: Archive step in base file"
			archiveArtifacts artifacts: '**', excludes: 'openjdk*'
			if (!params.KEEP_WORKSPACE) {
				cleanWs()
			}
		}
		
	}
}

def getJavaVersionFromJvmVersion() {
	String regex = ${JVM_VERSION}
	def m = regex =~ /^openjdk(\d+)(-openj9|-sap)?$/
	def match = m[0][1]
	def java_version = "SE$match0"
	echo "java_version=$java_version"
	return java_version
}

def getJDKImpl(jvm_version) {
	def jdk_impl = 'hotspot'
	if (jvm_version.contains('openj9')) {
		jdk_impl = 'openj9'
	} else if (JVM_VERSION.contains('sap')) {
		jdk_impl = 'sap'
	}
	return jdk_impl
}

def setLabelParam() {
	if( params.LABEL ) {
		LABEL = params.LABEL
	}
}

def addJobDescription() {
	if (params.PERSONAL_BUILD) {
		// update build name if personal build
		wrap([$class: 'BuildUser']) {
			currentBuild.displayName = "#${BUILD_NUMBER} - ${BUILD_USER_EMAIL}"
		}
	}
	
	def description = (currentBuild.description) ? currentBuild.description + "<br>" : ""
	currentBuild.description = description \
		+ "TARGET: ${params.TARGET}<br/>" \
		+ "LABEL: <a href=${JENKINS_URL}label/${LABEL}>${LABEL}</a><br/>" \
		+ "<a href=${JENKINS_URL}computer/${NODE_NAME}>${NODE_NAME}</a>"
}

def getJenkinsDomain() {
	String regex = env.JENKINS_URL
	def m = regex =~ /:\/\/(.*)\/?/
	def match = m[0][1]
	def domainName = "undefined"
	if (match) {
	    domainName = match
	}
	return domainName
}

def uploadToArtifactory() {
	if (params.ARTIFACTORY_SERVER) {
		def server = Artifactory.server params.ARTIFACTORY_SERVER
		def artifactoryRepo = params.ARTIFACTORY_REPO ? params.ARTIFACTORY_REPO : "sys-rt-generic-local"
		def jenkinsDomain = params.JENKINS_DOMAIN ? params.JENKINS_DOMAIN : getJenkinsDomain()
		def artifactoryUploadDir = "${artifactoryRepo}/${jenkinsDomain}/${JOB_NAME}/${BUILD_ID}/"

		def uploadSpec = """{
			"files":[
					{
						"pattern": "${env.WORKSPACE}/*_test_output.tar.gz",
						"target": "${artifactoryUploadDir}"
					}
				]
			}"""

		def buildInfo = Artifactory.newBuildInfo()
		// if ARTIFACTORY_NUM_ARTIFACTS is not set, set to keep 20 build artifacts
		def numArtifacts = params.ARTIFACTORY_NUM_ARTIFACTS ? params.ARTIFACTORY_NUM_ARTIFACTS : 20

		buildInfo.retention maxBuilds: numArtifacts, deleteBuildArtifacts: true
		server.upload spec: uploadSpec, buildInfo: buildInfo
		server.publishBuildInfo buildInfo

		def artifactoryUrl = server.getUrl()
		def uploadUrl = "${artifactoryUrl}/${artifactoryUploadDir}"
		echo "Test output artifactory URL:'${uploadUrl}'"
	} else {
		echo "ARTIFACTORY_SERVER is not set. Artifacts are not uploaded onto artifactory server."
	}
}

return this
