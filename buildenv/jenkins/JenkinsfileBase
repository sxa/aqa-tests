#!groovy
def getBuildList() {
	// This map is created in case of BUILD_LIST is not provided. Once we match all sub-folders with top-level test targets, this map can be simplified.
	def TESTPROJECTS = [system:'system', perf:'perf', jck:'jck', external:'external', functional: 'functional', openjdk:'openjdk', jdk:'openjdk', runtest:'', sanity:'', extended:'']
	String fullTarget="${TARGET}"
	String[] levelTargets = fullTarget.split('\\.')
	String groupTarget = levelTargets[-1]
	String[] partsTarget = groupTarget.split('_|-')
	String simpleTarget = partsTarget[0]
	def TESTPROJECT = TESTPROJECTS[simpleTarget]
	return TESTPROJECT
}

def makeTest(testParam) {
	String tearDownCmd = "if [ `uname` = AIX ] || [ `uname` = SunOS ]; then MAKE=gmake; else MAKE=make; fi; \$MAKE -f ./openjdk-tests/TKG/testEnv.mk testEnvTeardown"
	try {
		sh "$tearDownCmd"
		sh "./openjdk-tests/maketest.sh $testParam"
	} finally {
		sh "$tearDownCmd"
	}
}

def setupEnv() {
	if ( params.JDK_VERSION ) {
		env.ORIGIN_JDK_VERSION = params.JDK_VERSION
		env.JDK_VERSION = params.JDK_VERSION.equalsIgnoreCase("next") ? "" : params.JDK_VERSION
	}

	env.SPEC = "${SPEC}"

	PLATFORM = params.PLATFORM ? params.PLATFORM : ""
	ADOPTOPENJDK_REPO = params.ADOPTOPENJDK_REPO ? params.ADOPTOPENJDK_REPO : (env.SPEC.startsWith('zos') ? "git@github.com:AdoptOpenJDK/openjdk-tests.git" : "https://github.com/AdoptOpenJDK/openjdk-tests.git")
	ADOPTOPENJDK_BRANCH = params.ADOPTOPENJDK_BRANCH ? params.ADOPTOPENJDK_BRANCH : "master"
	CLONE_OPENJ9 = params.CLONE_OPENJ9 ? params.CLONE_OPENJ9 : "true"
	OPENJ9_REPO = params.OPENJ9_REPO ? params.OPENJ9_REPO : (env.SPEC.startsWith('zos') ? "git@github.com:eclipse/openj9.git" : "https://github.com/eclipse/openj9.git")
	OPENJ9_BRANCH = params.OPENJ9_BRANCH ? params.OPENJ9_BRANCH : "master"
	CUSTOM_TARGET = params.CUSTOM_TARGET ? params.CUSTOM_TARGET : ""
	TKG_REPO = params.TKG_REPO ? params.TKG_REPO : (env.SPEC.startsWith('zos') ? "git@github.com:AdoptOpenJDK/TKG.git" :"https://github.com/AdoptOpenJDK/TKG.git")
	TKG_BRANCH = params.TKG_BRANCH ? params.TKG_BRANCH : "master"
	TKG_SHA = params.TKG_SHA ? params.TKG_SHA : ""
	UPSTREAM_JOB_NAME = params.UPSTREAM_JOB_NAME ? params.UPSTREAM_JOB_NAME : ""
	UPSTREAM_JOB_NUMBER = params.UPSTREAM_JOB_NUMBER ? params.UPSTREAM_JOB_NUMBER : ""
	SSH_AGENT_CREDENTIAL = params.SSH_AGENT_CREDENTIAL ? params.SSH_AGENT_CREDENTIAL : ""
	KEEP_WORKSPACE = params.KEEP_WORKSPACE ? params.KEEP_WORKSPACE : false
	OPENJ9_SHA = params.OPENJ9_SHA ? params.OPENJ9_SHA : ""
	env.USER_CREDENTIALS_ID = params.USER_CREDENTIALS_ID ? params.USER_CREDENTIALS_ID : ""
	env.TEST_JDK_HOME = "$WORKSPACE/openjdkbinary/j2sdk-image"
	env.JVM_VERSION = params.JVM_VERSION ? params.JVM_VERSION : ""
	env.JVM_OPTIONS = params.JVM_OPTIONS ? params.JVM_OPTIONS : ""
	env.EXTRA_OPTIONS = params.EXTRA_OPTIONS ? params.EXTRA_OPTIONS : ""
	env.EXTRA_DOCKER_ARGS = params.EXTRA_DOCKER_ARGS ? params.EXTRA_DOCKER_ARGS : ""

	env.TEST_FLAG = params.TEST_FLAG ? params.TEST_FLAG : ''
	env.KEEP_REPORTDIR = params.KEEP_REPORTDIR ? params.KEEP_REPORTDIR : ''
	SDK_RESOURCE = params.SDK_RESOURCE ? params.SDK_RESOURCE : "upstream"
	env.AUTO_DETECT = params.AUTO_DETECT
	
	ITERATIONS = params.ITERATIONS ? "${params.ITERATIONS}".toInteger() : 1
	
	if (params.JRE_IMAGE) {
		env.JRE_IMAGE = "${WORKSPACE}/${params.JRE_IMAGE}"
	}
	
	if (params.JDK_IMPL) {
		env.JDK_IMPL = params.JDK_IMPL
	} else if (params.JVM_VERSION) {
		env.JDK_IMPL = getJDKImpl(params.JVM_VERSION)
	}
	if( params.BUILD_LIST ) {
		env.BUILD_LIST = params.BUILD_LIST
	} else {
		env.BUILD_LIST = "${getBuildList()}"
	}

	if( params.PERF_ROOT ) {
		env.PERF_ROOT = params.PERF_ROOT
	} else {
		env.PERF_ROOT = "$WORKSPACE/../../benchmarks"
	}

	env.JCK_VERSION = params.JCK_VERSION ? params.JCK_VERSION : ""
	env.JCK_ROOT = params.JCK_ROOT ? params.JCK_ROOT : ""
	env.JCK_GIT_REPO = params.JCK_GIT_REPO ? params.JCK_GIT_REPO : ""

	if (env.BUILD_LIST == 'openjdk' ||  env.BUILD_LIST.contains('external')) {
		env.DIAGNOSTICLEVEL ='noDetails'
	}

	// Optional parameter RELEASE_TAG and it is only used in openjdk regression test
	if( params.RELEASE_TAG ) {
		env.RELEASE_TAG = params.RELEASE_TAG
	}
	// Optional parameter RELEASE_TAG and it is only used in openjdk regression test
	if( params.OPENJDK_SHA) {
		env.OPENJDK_SHA = params.OPENJDK_SHA
	}
	if( params.DOCKERIMAGE_TAG ) {
		env.DOCKERIMAGE_TAG = params.DOCKERIMAGE_TAG
	}
	if ( env.SPEC.contains('sparcv')) {
		sh 'env'
	}
}

def setupParallelEnv() {
	stage('setupParallelEnv') {
		timestamps{
			setupEnv()		
			
			//Initialization for things in common between both multiple iterations and many subtests
			//repeatAmount is the number of times the loops go through
			def testSubDirs = []
			int repeatAmount = ITERATIONS
			
			//Setup for option-specific parameters
			//If ITERATIONS is 1, then parallel is based on subfolders
			if (repeatAmount == 1) {
				dir("$WORKSPACE/openjdk-tests/${env.BUILD_LIST}") {
					testSubDirs = sh(returnStdout: true, script: "ls -d */").trim().tokenize()
				}

				// We currently only run special.system in parallel mode and some subfolders do not have any system test in special level
				// In order to save machine resources, exclude the following system test subfolders in parallel mode
				def excludes = ["jlm/", "modularity/", "sharedClasses/"]
				echo "exclude the following system test subfolders: ${excludes}"
				testSubDirs = testSubDirs - excludes
				repeatAmount = testSubDirs.size()
				echo "repeatAmount is ${repeatAmount}, testSubDirs is ${testSubDirs}, running test in parallel mode"
			}
			
			parallel_tests = [:]

			for (int i = 0; i < repeatAmount; i++) {
				def buildListName = ""
				def childTest = ""
				if (ITERATIONS == 1) {
					childTest = testSubDirs[i].trim().replace("/","");
					buildListName = "${env.BUILD_LIST}/${childTest}"
				}
				else {
					childTest = "test_iteration_${i}"
					buildListName = env.BUILD_LIST
				}
				def TEST_JOB_NAME = "${JOB_NAME}"

				//ToDo: need to find a better way to pass parameters to downstream builds.
				//Ideally, we should only need to pass in modified parameters (i.e.,
				//BUILD_LIST, IS_PARALLEL)
				parallel_tests[childTest] = {
					build job: TEST_JOB_NAME, parameters: [
						string(name: 'ADOPTOPENJDK_REPO', value: ADOPTOPENJDK_REPO),
						string(name: 'ADOPTOPENJDK_BRANCH', value: ADOPTOPENJDK_BRANCH),
						string(name: 'CLONE_OPENJ9', value: CLONE_OPENJ9),
						string(name: 'OPENJ9_REPO', value: OPENJ9_REPO),
						string(name: 'OPENJ9_SHA', value: OPENJ9_SHA),
						string(name: 'OPENJ9_BRANCH', value: OPENJ9_BRANCH),
						string(name: 'TKG_REPO', value: TKG_REPO),
						string(name: 'TKG_SHA', value: TKG_SHA),
						string(name: 'TKG_BRANCH', value: TKG_BRANCH),
						string(name: 'JDK_VERSION', value: JDK_VERSION),
						string(name: 'JDK_IMPL', value: JDK_IMPL),
						string(name: 'BUILD_LIST', value: buildListName),
						string(name: 'TARGET', value: TARGET),
						string(name: 'CUSTOM_TARGET', value: CUSTOM_TARGET),
						string(name: 'SDK_RESOURCE', value: SDK_RESOURCE),
						string(name: 'CUSTOMIZED_SDK_URL', value: CUSTOMIZED_SDK_URL),
						string(name: 'CUSTOMIZED_SDK_URL_CREDENTIAL_ID', value: CUSTOMIZED_SDK_URL_CREDENTIAL_ID),
						string(name: 'UPSTREAM_JOB_NAME', value: UPSTREAM_JOB_NAME),
						string(name: 'UPSTREAM_JOB_NUMBER', value: UPSTREAM_JOB_NUMBER),
						string(name: 'TEST_FLAG', value: TEST_FLAG),
						string(name: 'KEEP_REPORTDIR', value: KEEP_REPORTDIR),
						string(name: 'EXTRA_OPTIONS', value: EXTRA_OPTIONS),
						string(name: 'JVM_OPTIONS', value: JVM_OPTIONS),
						string(name: 'PLATFORM', value: PLATFORM),
						string(name: 'ITERATIONS', value: "1"),
						string(name: 'LABEL', value: LABEL),
						string(name: 'JCK_GIT_REPO', value: JCK_GIT_REPO),
						string(name: 'SSH_AGENT_CREDENTIAL', value: SSH_AGENT_CREDENTIAL),
						string(name: 'USER_CREDENTIALS_ID', value: env.USER_CREDENTIALS_ID),
						booleanParam(name: 'KEEP_WORKSPACE', value: KEEP_WORKSPACE),
						string(name: 'ARTIFACTORY_SERVER', value: ARTIFACTORY_SERVER),
						booleanParam(name: 'PERSONAL_BUILD', value: PERSONAL_BUILD),
						booleanParam(name: 'IS_PARALLEL', value: false),
						booleanParam(name: 'AUTO_DETECT', value: AUTO_DETECT),
						string(name: 'TIME_LIMIT', value: "${TIME_LIMIT}"),
						//This parameter is needed because it enables many iterations of the same test (which all have same names)
						//to have a unique variable in the array so that Jenkins will run it
						string(name: 'RUNTIME_NAME', value: childTest),
					]
				}
			}
			// return to top level pipeline file in order to exit node block before running tests in parallel
		}
	}
}

def setup() {
	stage('Setup') {
		timestamps{
			setupEnv()

			if (fileExists('openjdkbinary')) {
				dir('openjdkbinary') {
					deleteDir()
				}
			}
			if (fileExists('jvmtest')) {
				dir('jvmtest') {
					deleteDir()
				}
			}

			if (params.CUSTOMIZED_SDK_URL) {
				SDK_RESOURCE = "customized"
				CUSTOMIZED_SDK_URL_OPTION = "-c '${params.CUSTOMIZED_SDK_URL}'"
			} else {
				CUSTOMIZED_SDK_URL_OPTION = ""
			}
			if (params.CUSTOMIZED_SDK_SOURCE_URL) {
				SDK_RESOURCE = "customized"
				CUSTOMIZED_SDK_SOURCE_URL_OPTION = "-S '${params.CUSTOMIZED_SDK_SOURCE_URL}'"
			} else {
				CUSTOMIZED_SDK_SOURCE_URL_OPTION = ""
			}

			if (SDK_RESOURCE == 'upstream' && !params.CUSTOMIZED_SDK_URL) {
				dir('openjdkbinary') {
					step([$class: 'CopyArtifact',
						fingerprintArtifacts: true,
						flatten: true,
						filter: "**/*.tar.gz,**/*.tgz,**/*.zip,**/*.jar",
						projectName: "${params.UPSTREAM_JOB_NAME}",
						selector: [$class: 'SpecificBuildSelector', buildNumber: "${params.UPSTREAM_JOB_NUMBER}"]])
				}
			}
			CLONE_OPENJ9_OPTION = (params.CLONE_OPENJ9) ? "--clone_openj9 ${params.CLONE_OPENJ9}" : ""
			OPENJ9_REPO_OPTION = "--openj9_repo ${OPENJ9_REPO}"
			OPENJ9_BRANCH_OPTION = "--openj9_branch ${OPENJ9_BRANCH}"
			OPENJ9_SHA_OPTION = (params.OPENJ9_SHA) ? "--openj9_sha ${params.OPENJ9_SHA}" : ""
			TKG_REPO_OPTION = "--tkg_repo ${TKG_REPO}"
			TKG_BRANCH_OPTION = "--tkg_branch ${TKG_BRANCH}"
			TKG_SHA_OPTION = (params.TKG_SHA) ? "--tkg_sha ${params.TKG_SHA}" : ""
			JDK_VERSION_OPTION = env.JDK_VERSION ? "-j ${env.JDK_VERSION}" : ""
			JDK_IMPL_OPTION = env.JDK_IMPL ? "-i ${env.JDK_IMPL}" : ""
			// system test repository exports to be used by system/common.xml
			if (params.ADOPTOPENJDK_SYSTEMTEST_REPO) {
				env.ADOPTOPENJDK_SYSTEMTEST_REPO = params.ADOPTOPENJDK_SYSTEMTEST_REPO
			}

			if (params.ADOPTOPENJDK_SYSTEMTEST_BRANCH) {
				env.ADOPTOPENJDK_SYSTEMTEST_BRANCH = params.ADOPTOPENJDK_SYSTEMTEST_BRANCH
			}

			if (params.OPENJ9_SYSTEMTEST_REPO) {
				env.OPENJ9_SYSTEMTEST_REPO = params.OPENJ9_SYSTEMTEST_REPO
			}

			if (params.OPENJ9_SYSTEMTEST_BRANCH) {
				env.OPENJ9_SYSTEMTEST_BRANCH = params.OPENJ9_SYSTEMTEST_BRANCH
			}

			if (params.STF_REPO) {
				env.STF_REPO = params.STF_REPO
			}

			if (params.STF_BRANCH) {
				env.STF_BRANCH = params.STF_BRANCH
			}

			// vendor test
			// expect VENDOR_TEST_* to be comma separated string parameters
			VENDOR_TEST_REPOS = (params.VENDOR_TEST_REPOS) ? "--vendor_repos \"${params.VENDOR_TEST_REPOS}\"" : ""
			VENDOR_TEST_BRANCHES = (params.VENDOR_TEST_BRANCHES) ? "--vendor_branches \"${params.VENDOR_TEST_BRANCHES}\"" : ""
			VENDOR_TEST_DIRS = (params.VENDOR_TEST_DIRS) ? "--vendor_dirs \"${params.VENDOR_TEST_DIRS}\"" : ""
			VENDOR_TEST_SHAS = (params.VENDOR_TEST_SHAS) ? "--vendor_shas \"${params.VENDOR_TEST_SHAS}\"" : ""
			GET_SH_CMD = "./openjdk-tests/get.sh -s `pwd` -t `pwd`/openjdk-tests -p $PLATFORM -r ${SDK_RESOURCE} ${JDK_VERSION_OPTION} ${JDK_IMPL_OPTION} ${CUSTOMIZED_SDK_URL_OPTION} ${CUSTOMIZED_SDK_SOURCE_URL_OPTION} ${CLONE_OPENJ9_OPTION} ${OPENJ9_REPO_OPTION} ${OPENJ9_BRANCH_OPTION} ${OPENJ9_SHA_OPTION} ${TKG_REPO_OPTION} ${TKG_BRANCH_OPTION} ${TKG_SHA_OPTION} ${VENDOR_TEST_REPOS} ${VENDOR_TEST_BRANCHES} ${VENDOR_TEST_DIRS} ${VENDOR_TEST_SHAS}"
			
			dir( WORKSPACE) {
				// use sshagent with Jenkins credentials ID for all platforms except zOS
				// on zOS use the user's ssh key
				if (!env.SPEC.startsWith('zos')) {
					get_sources_with_authentication()
				} else {
					get_sources()
				}
				getJobProperties()
			}
		}
	}
}

def getJobProperties() {
	def jobProperties = "./openjdk-tests/job.properties"
	if (fileExists("${jobProperties}")) {
		echo "readProperties file: ${jobProperties}"
		def properties = readProperties file: "${jobProperties}"
		if (properties.TEST_JDK_HOME) {
			env.TEST_JDK_HOME = properties.TEST_JDK_HOME
			echo "Reset TEST_JDK_HOME to ${TEST_JDK_HOME}"
		}
	}
}

def get_sources_with_authentication() {
	sshagent(credentials:["${params.USER_CREDENTIALS_ID}"], ignoreMissing: true) {
		get_sources()
	}
}

def get_sources() {
	if (params.CUSTOMIZED_SDK_URL_CREDENTIAL_ID) {
		// USERNAME and PASSWORD reference with a withCredentials block will not be visible within job output
		withCredentials([usernamePassword(credentialsId: "${params.CUSTOMIZED_SDK_URL_CREDENTIAL_ID}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
			sh "$GET_SH_CMD"
		}
	} else {
		sh "$GET_SH_CMD"
	}
}

def buildTest() {
	stage('Build') {
		timestamps{
			echo 'Building tests...'

			if ( params.PERF_CREDENTIALS_ID ) {
				withCredentials([usernamePassword(credentialsId: "$params.PERF_CREDENTIALS_ID",
					passwordVariable: "PASSWORD_VAR", usernameVariable: "USERNAME_VAR")]) {
						env.PERF_USERNAME = USERNAME_VAR
						env.PERF_PASSWORD = PASSWORD_VAR
				}
			}

			try {
				//get pre-staged jars from test.getDependency build before test compilation
				copyArtifacts fingerprintArtifacts: true, projectName: "test.getDependency", selector: lastSuccessful(), target: 'openjdk-tests/TKG/lib'
			} catch (Exception e) {
				echo 'Cannot run copyArtifacts from test.getDependency. Skipping copyArtifacts...'
			}

			try {
				if (env.BUILD_LIST.startsWith('system') || env.BUILD_LIST.startsWith('jck')) {
					//get pre-staged test jars from systemtest.getDependency build before system test compilation
					copyArtifacts fingerprintArtifacts: true, projectName: "systemtest.getDependency", selector: lastSuccessful(), target: 'openjdk-tests'
				}
			} catch (Exception e) {
				echo 'Cannot run copyArtifacts from systemtest.getDependency. Skipping copyArtifacts...'
			}
			
			if (fileExists('openjdkbinary/openjdk-test-image')) {
				env.TESTIMAGE_PATH = "$WORKSPACE/openjdkbinary/openjdk-test-image"
			}

			if (fileExists('openjdkbinary/openjdk-test-image/openj9')) {
				env.NATIVE_TEST_LIBS = "$WORKSPACE/openjdkbinary/openjdk-test-image/openj9"
			}

			// use sshagent with Jenkins credentials ID for all platforms except zOS
			if (!env.SPEC.startsWith('zos')) {
				sshagent (credentials: ["$params.SSH_AGENT_CREDENTIAL"], ignoreMissing: true) {
					sh "./openjdk-tests/maketest.sh ./openjdk-tests";
				}
			} else {
				sh "./openjdk-tests/maketest.sh ./openjdk-tests";
			}
		}
	}
}

def runTest( ) {
	stage('Test') {
		timestamps{
			echo 'Running tests...'
			def CUSTOM_OPTION = ''
			int iterationCount = 1
			
			TARGET = "${params.TARGET}";
			if (TARGET.contains('custom') && CUSTOM_TARGET!='') {
				CUSTOM_OPTION = "${TARGET.toUpperCase()}_TARGET='${CUSTOM_TARGET}'"
			}
			RUNTEST_CMD = "./openjdk-tests _${params.TARGET} ${CUSTOM_OPTION}"
			for (int i = 0; i < ITERATIONS; i++) {
				echo "ITERATION: ${iterationCount}/${ITERATIONS}"
				if (env.BUILD_LIST == 'openjdk') {
					if (env.SPEC.startsWith('linux_x86-64')) {
						wrap([$class: 'Xvfb', autoDisplayName: true]) {
							def DISPLAY = sh (
								script: 'ps -f  | grep \'[X]vfb\' | awk \'{print \$9}\'',
								returnStdout: true
							).trim()
							env.DISPLAY = "${DISPLAY}"
							echo "env.DISPLAY is ${env.DISPLAY}"
							makeTest("${RUNTEST_CMD}")
						}
					} else {
						makeTest("${RUNTEST_CMD}")
					}
				} else if (env.BUILD_LIST.startsWith('jck')) {
					if (env.SPEC.startsWith('linux')) {
						wrap([$class: 'Xvfb', autoDisplayName: true]) {
							def DISPLAY = sh (
								script: 'ps -f  | grep \'[X]vfb\' | awk \'{print \$9}\'',
								returnStdout: true
							).trim()
							env.DISPLAY = "${DISPLAY}"
							echo "env.DISPLAY is ${env.DISPLAY}"
							makeTest("${RUNTEST_CMD}")
						}
					} else if (env.SPEC.startsWith('aix')) {
						sh "nohup /usr/bin/X11/X -force -vfb -x abx -x dbe -x GLX :0 &"
						env.DISPLAY = ":0"
						echo "env.DISPLAY is ${env.DISPLAY}"
						makeTest("${RUNTEST_CMD}")
					} else {
						makeTest("${RUNTEST_CMD}")
					}
				} else {
					makeTest("${RUNTEST_CMD}")
				}
				iterationCount++
			}
		}
	}
}

def post(output_name) {
	stage('Post') {
		timestamps{
			if (output_name.contains(',')) {
				output_name = "specifiedTarget"
			}
			else {
				output_name = output_name.replace("/","_")
			}
			def tar_cmd = "tar -zcf"
			def suffix = ".tar.gz"
			def pax_opt = ""
			if (SPEC.startsWith('zos')) {
				echo 'Converting tap file from ebcdic to ascii...'
				sh 'cd ./openjdk-tests/TKG'
				def tapFiles = findFiles(glob: "**/*.tap")
				for (String tapFile : tapFiles) {
					sh "iconv -f ibm-1047 -t iso8859-1 ${tapFile} > ${tapFile}.ascii; rm ${tapFile}; mv ${tapFile}.ascii ${tapFile}"
				}

				tar_cmd = "pax -wf"
				suffix = ".pax.Z"
				pax_opt = "-x pax"
			}

			boolean failIfNoResultsValue = true
			if (params.IS_PARALLEL == true) {
				failIfNoResultsValue = false
			}
			step([$class: "TapPublisher", testResults: "**/*.tap", outputTapToConsole: false, failIfNoResults: failIfNoResultsValue])

			junit allowEmptyResults: true, keepLongStdio: true, testResults: '**/work/**/*.jtr.xml, **/junitreports/**/*.xml, **/external_test_reports/**/*.xml'
			archiveSHAFile()

			addGrinderLink()
			
			if (env.BUILD_LIST.startsWith('jck')) {
				xunit (
				tools: [Custom(customXSL: "$WORKSPACE/openjdk-tests/jck/xUnit.xsl",
					deleteOutputFiles: true,
					failIfNotNew: true,
					pattern: "**/TKG/test_output_*/**/report.xml",
					skipNoTestFiles: true,
					stopProcessingIfError: true)]
				)
			}

			if (currentBuild.result != 'SUCCESS' || params.ARCHIVE_TEST_RESULTS) {
				def test_output_tar_name = "${output_name}_test_output${suffix}"
				sh "${tar_cmd} ${test_output_tar_name} ${pax_opt} ./openjdk-tests/TKG/test_output_*"

				if (!params.ARTIFACTORY_SERVER) {
					echo "ARTIFACTORY_SERVER is not set. Saving artifacts on jenkins."
					archiveArtifacts artifacts: test_output_tar_name, fingerprint: true, allowEmptyArchive: true
				} else {
					def pattern = "${env.WORKSPACE}/*_test_output.*"
					uploadToArtifactory(pattern)
				}
			}
			//for performance test, archive regardless the build result
			if (env.BUILD_LIST.startsWith('perf')) {
				def benchmark_output_tar_name = "benchmark_test_output${suffix}"
				sh "${tar_cmd} ${benchmark_output_tar_name} ${pax_opt} ./openjdk-tests/TKG/test_output_*"
				if (!params.ARTIFACTORY_SERVER) {
					echo "ARTIFACTORY_SERVER is not set. Saving artifacts on jenkins."
					archiveArtifacts artifacts: benchmark_output_tar_name, fingerprint: true, allowEmptyArchive: true
				} else {
					def pattern = "${env.WORKSPACE}/*_test_output.*"
					uploadToArtifactory(pattern)
				}
			}
		}
	}
}

def testBuild() {
	TIME_LIMIT =  params.TIME_LIMIT ? params.TIME_LIMIT.toInteger() : 10
	timeout(time: TIME_LIMIT, unit: 'HOURS') {
		try {
			addJobDescription()

			// prepare environment and compile test projects
			if( params.IS_PARALLEL == true ){
				setupParallelEnv()
			} else {
				setup()
				try {
					//ToDo: temporary workaround for jck test parallel runs
					// until build.xml is added into each subfolder
					if( env.BUILD_LIST.startsWith('jck/')) {
						def temp = env.BUILD_LIST
						env.BUILD_LIST = "jck"
						buildTest()
						env.BUILD_LIST = temp
					} else {
						buildTest()
					}
					runTest()
				} finally {
					post("${env.BUILD_LIST}")
				}
			}
		} finally {
			if (!params.KEEP_WORKSPACE) {
				// cleanWs() does not work in some cases, so set opts below
				cleanWs notFailBuild: true, disableDeferredWipeout: true, deleteDirs: true
			}
		}

	}
}

def getJDKImpl(jvm_version) {
	def jdk_impl = 'hotspot'
	if (jvm_version.contains('openj9')) {
		jdk_impl = 'openj9'
	} else if (JVM_VERSION.contains('sap')) {
		jdk_impl = 'sap'
	}
	return jdk_impl
}

def addJobDescription() {
	if (params.PERSONAL_BUILD) {
		// update build name if personal build
		wrap([$class: 'BuildUser']) {
			currentBuild.displayName = "#${BUILD_NUMBER} - ${BUILD_USER_EMAIL}"
		}
	}

	def description = (currentBuild.description) ? currentBuild.description + "<br>" : ""
	currentBuild.description = description \
		+ "TARGET: ${params.TARGET}<br/>" \
		+ "LABEL: <a href=${JENKINS_URL}label/${LABEL}>${LABEL}</a><br/>" \
		+ "<a href=${JENKINS_URL}computer/${NODE_NAME}>${NODE_NAME}</a>"
}

def getJenkinsDomain() {
	String regex = env.JENKINS_URL
	def m = regex =~ /:\/\/(.*)\/?/
	def match = m[0][1]
	def domainName = "undefined"
	if (match) {
		domainName = match
	}
	return domainName
}

def archiveSHAFile() {
	def shaFile = "openjdk-tests/TKG/SHA.txt";
	if (!params.ARTIFACTORY_SERVER) {
		echo "ARTIFACTORY_SERVER is not set. Saving SHA file on jenkins."
		archiveArtifacts artifacts: shaFile, fingerprint: true, allowEmptyArchive: true
	} else {
		def pattern = "${env.WORKSPACE}/${shaFile}"
		uploadToArtifactory(pattern)
	}
}

def uploadToArtifactory(pattern) {
	if (params.ARTIFACTORY_SERVER) {
		def server = Artifactory.server params.ARTIFACTORY_SERVER
		def artifactoryRepo = params.ARTIFACTORY_REPO ? params.ARTIFACTORY_REPO : "sys-rt-generic-local"
		def artifactoryRoorDir = params.ARTIFACTORY_ROOT_DIR ? params.ARTIFACTORY_ROOT_DIR : getJenkinsDomain()
		def artifactoryUploadDir = "${artifactoryRepo}/${artifactoryRoorDir}/${JOB_NAME}/${BUILD_ID}/"

		def uploadSpec = """{
			"files":[
					{
						"pattern": "${pattern}",
						"target": "${artifactoryUploadDir}"
					}
				]
			}"""

		def buildInfo = Artifactory.newBuildInfo()
		// if ARTIFACTORY_NUM_ARTIFACTS is not set, set to keep 20 build artifacts
		def numArtifacts = params.ARTIFACTORY_NUM_ARTIFACTS ? params.ARTIFACTORY_NUM_ARTIFACTS : 20

		buildInfo.retention maxBuilds: numArtifacts, deleteBuildArtifacts: true
		server.upload spec: uploadSpec, buildInfo: buildInfo
		server.publishBuildInfo buildInfo

		def artifactoryUrl = server.getUrl()
		def uploadUrl = "${artifactoryUrl}/${artifactoryUploadDir}"
		echo "Test output artifactory URL:'${uploadUrl}'"
		if (!currentBuild.description.contains(uploadUrl)) {
			currentBuild.description += "<br><a href=${uploadUrl}>Artifacts</a>"
		}
	} else {
		echo "ARTIFACTORY_SERVER is not set. Artifacts are not uploaded onto artifactory server."
	}
}

def addGrinderLink() {
	def	customTargetOpt = params.CUSTOM_TARGET ? "&CUSTOM_TARGET=${params.CUSTOM_TARGET}" :  ""
	def	sdkSourceOpt = params.SDK_RESOURCE ? "&SDK_RESOURCE=${params.SDK_RESOURCE}" :  ""
	def	sdkUrlOpt = params.CUSTOMIZED_SDK_URL ? "&CUSTOMIZED_SDK_URL=${params.CUSTOMIZED_SDK_URL}" : ""
	def	sdkUrlCredentialOpt = params.CUSTOMIZED_SDK_URL_CREDENTIAL_ID ? "&CUSTOMIZED_SDK_URL_CREDENTIAL_ID=${params.CUSTOMIZED_SDK_URL_CREDENTIAL_ID}" : ""
	def	upstreamJobNameOpt = params.UPSTREAM_JOB_NAME ? "&UPSTREAM_JOB_NAME=${params.UPSTREAM_JOB_NAME}" : ""
	def	upstreamJobNumOpt = params.UPSTREAM_JOB_NUMBER ? "&UPSTREAM_JOB_NUMBER=${params.UPSTREAM_JOB_NUMBER}" : ""

	def url = "${HUDSON_URL}/job/Grinder/parambuild/?" \
	+ "JDK_VERSION=${params.JDK_VERSION}" \
	+ "&JDK_IMPL=${params.JDK_IMPL}" \
	+ "&BUILD_LIST=${params.BUILD_LIST}" \
	+ "&PLATFORM=${params.PLATFORM}" \
	+ "&TARGET=${params.TARGET}" \
	+ "${sdkSourceOpt}${sdkUrlOpt}${sdkUrlCredentialOpt}${customTargetOpt}${upstreamJobNameOpt}${upstreamJobNumOpt}"

	url = url.replace(" ", "%20")

	currentBuild.description += "<br><a href=${url}>Rerun in Grinder</a> TARGET can be changed to run only the failed test target"
}

def run_parallel_tests() {
	if (params.IS_PARALLEL == true) {
		stage ("Parallel Tests") {
			parallel parallel_tests
		}
	}
}

return this
